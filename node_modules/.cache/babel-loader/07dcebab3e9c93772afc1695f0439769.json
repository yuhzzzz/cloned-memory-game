{"ast":null,"code":"var _jsxFileName = \"/home/yz-/Desktop/magic-memory/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport { useState } from \"react\";\nimport Card from \"./components/Card\";\nimport { matches } from \"@testing-library/jest-dom/dist/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardImages = [{\n  src: \"/img/helmet-1.png\",\n  matched: false\n}, {\n  src: \"/img/potion-1.png\",\n  matched: false\n}, {\n  src: \"/img/ring-1.png\",\n  matched: false\n}, {\n  src: \"/img/scroll-1.png\",\n  matched: false\n}, {\n  src: \"/img/shield-1.png\",\n  matched: false\n}, {\n  src: \"/img/sword-1.png\",\n  matched: false\n}];\nfunction App() {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  // shuffle cards\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages].sort(() => Math.random() - 0.5).map(card => ({\n      ...card,\n      id: Math.random()\n    }));\n    console.log(shuffledCards);\n    setCards(shuffledCards);\n    setTurns(0);\n  };\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      if (choiceOne.src === choiceTwo.src) {\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if (card.src === choiceOne.src) {\n              return {\n                ...card,\n                matched: true\n              };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurn();\n      } else {\n        resetTurn();\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n  // handle choice\n  const handleChoice = card => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  };\n  const resetTurn = () => {\n    setChoiceTwo(null);\n    setChoiceOne(null);\n    setTurns(prevTurns => prevTurns + 1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Magic Match\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: shuffleCards,\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(Card, {\n        card: card,\n        handleChoice: handleChoice,\n        flipped: card === choiceOne || card == choiceTwo || card.matched\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"/JnteANCPxCZNpFpO1ZAWIjzFcc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useState","Card","matches","cardImages","src","matched","App","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","shuffleCards","shuffledCards","sort","Math","random","map","card","id","console","log","useEffect","prevCards","resetTurn","handleChoice","prevTurns"],"sources":["/home/yz-/Desktop/magic-memory/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport { useState } from \"react\";\nimport Card from \"./components/Card\";\nimport { matches } from \"@testing-library/jest-dom/dist/utils\";\n\nconst cardImages = [\n  { src: \"/img/helmet-1.png\", matched: false },\n  { src: \"/img/potion-1.png\", matched: false },\n  { src: \"/img/ring-1.png\", matched: false },\n  { src: \"/img/scroll-1.png\", matched: false },\n  { src: \"/img/shield-1.png\", matched: false },\n  { src: \"/img/sword-1.png\", matched: false },\n];\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  // shuffle cards\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages]\n      .sort(() => Math.random() - 0.5)\n      .map((card) => ({ ...card, id: Math.random() }));\n    console.log(shuffledCards);\n    setCards(shuffledCards);\n    setTurns(0);\n  };\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      if (choiceOne.src === choiceTwo.src) {\n        setCards((prevCards) => {\n          return prevCards.map((card) => {\n            if (card.src === choiceOne.src) {\n              return { ...card, matched: true };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurn();\n      } else {\n        resetTurn();\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n  // handle choice\n  const handleChoice = (card) => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  };\n  const resetTurn = () => {\n    setChoiceTwo(null);\n    setChoiceOne(null);\n    setTurns((prevTurns) => prevTurns + 1);\n  };\n  return (\n    <div className=\"App\">\n      <h1>Magic Match</h1>\n\n      <button onClick={shuffleCards}>New Game</button>\n      <div className=\"card-grid\">\n        {cards.map((card) => (\n          <Card\n            card={card}\n            key={card.id}\n            handleChoice={handleChoice}\n            flipped={card === choiceOne || card == choiceTwo || card.matched}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}